/// <reference file="../vars" />


@mixin retina($path, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
		   (-o-min-device-pixel-ratio: 2.6/2),
		   (-webkit-min-device-pixel-ratio: 1.3),
		   (min-device-pixel-ratio: 1.3),
		   (min-resolution: 1.3dppx) {
		background-image: url($path);
		background-size: $width $height;
	}
}
/* Usage of retina mixin ^^ */
/*
.logo {
	background: url("logo.png") no-repeat;
	@include image-2x("logo2x.png", 100px, 25px);
}
*/


@mixin transition($properties) {
	@include vendor(transition, $properties);
}


@mixin opacity($number) {
	$number--whole: (100 * $number);

	-ms-filter: #{"progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $number--whole + ")"};
	-moz-opacity:  $number;
	-khtml-opacity:  $number;
	opacity:  $number;
}


@mixin horizontal-gradient($fromColor, $toColor) {
	background: $toColor; /* Fallback Color */
	background: -webkit-gradient(linear, left top, right top, from($fromColor), to($toColor)); /* Saf4+, Chrome */
	background: -webkit-linear-gradient(left, $fromColor, $toColor); /* Chrome 10+, Saf5.1+, iOS 5+ */
	background:    -moz-linear-gradient(left, $fromColor, $toColor); /* FF3.6 */
	background:     -ms-linear-gradient(left, $fromColor, $toColor); /* IE10 */
	background:      -o-linear-gradient(left, $fromColor, $toColor); /* Opera 11.10+ */
	background:         linear-gradient(to right, $fromColor, $toColor);
	filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}
/* Usage */
/*
.foo {
    @include linear-gradient--horizontal(#000, #fff);
}
*/


@mixin loop-colours($selector: '') {
	@each $state in $states {
		$state-name: nth($state, 1);
		$state-colour: nth($state, 2); 
		
		@if $selector == parent {
			$selector: '&';
		}

		#{$selector}.is-#{$state-name} {
			@content;
		}
		
	}
}


